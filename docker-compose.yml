services:
  payment:
    build:
      context: .
      dockerfile: ./services/payment/Dockerfile
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://user:password@payment-db:5432/hexabank?sslmode=disable
      FRAUD_SERVICE_ADDRESS: fraud:50052
      METRICS_PORT: 2114
      OTLP_ENDPOINT: tempo:4318
      KAFKA_BROKER_ADDRESS: kafka:9092
    depends_on:
      payment-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  payment-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: hexabank
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d hexabank"]
      interval: 5s
      timeout: 5s
      retries: 5

  payment-db-migrations:
    image: ghcr.io/kukymbr/goose-docker:3.24.1
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=payment-db port=5432 user=user password=password dbname=hexabank
    volumes:
      - ./services/payment/adapters/postgres/migrations:/migrations
    depends_on:
      - payment-db

  fraud:
    build:
      context: .
      dockerfile: ./services/fraud/Dockerfile
    ports:
      - "50052:50052"
    environment:
      OTLP_ENDPOINT: tempo:4318
      METRICS_PORT: 2115

  notification:
    build:
      context: .
      dockerfile: ./services/notification/Dockerfile
    ports:
      - "8081:8081"
    environment:
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      KAFKA_BROKER_ADDRESS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-id-12345
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  tempo:
    image: grafana/tempo
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    volumes:
      - ./internal/observability/tracing/tempo-config.yaml:/etc/tempo/tempo.yaml
    ports:
      - "4318:4318"
      - "3200:3200"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./internal/observability/metrics/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:2.9.5
    ports:
      - "3100:3100"
    volumes:
      - ./internal/observability/logging/loki-config.yaml:/etc/loki/config.yaml
    command: -config.file=/etc/loki/config.yaml

  promtail:
    image: grafana/promtail:2.9.5
    volumes:
      - ./internal/observability/logging/promtail-config.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - tempo
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_SIGNOUT_MENU: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_THEME: "light"

volumes:
  kafka_data:
